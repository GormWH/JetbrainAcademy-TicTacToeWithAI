type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            String output = program.start();

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }



            if (!output.toLowerCase().replace("'", "\"") .contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/TicTacToe.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class TicTacToe {
        private static final Scanner scanner = new Scanner(System.in);
        private static final int size = 3;

        private char[] board = new char[9];
        private int x = 0;
        private int o = 0;

        public TicTacToe() {
            reset();
        }

        private void reset() {
            for (int i = 0; i < board.length; i++) {
                board[i] = '_';
            }
            x = 0;
            o = 0;
        }

        public void customReset() {
            System.out.print("Enter the cells: ");
            char[] userInput = scanner.nextLine().toCharArray();
            for (int i = 0; i < board.length; i++) {
                char mark = userInput[i];
                board[i] = mark;
                if (mark == 'X') x++;
                else if (mark == 'O') o++;
            }
            printBoard();
        }

        void printBoard() {
            System.out.println("---------");
            for (int i = 0; i < size; i++) {
                System.out.print("| ");
                for (int j = 0; j < size; j++) {
                    char mark = board[i * 3 + j];
                    if (mark == '_') { System.out.print("  "); }
                    else { System.out.print(mark + " "); }
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }

        void userAction() {
            System.out.print("Enter the coordinates: ");
            String[] userInput = scanner.nextLine().split("\\s+");
            if (!Utils.isUserInputNumber(userInput)) {
                // inputs not numbers
                System.out.println("You should enter numbers!");
                userAction();
            } else {
                // inputs are numbers
                final int row = Integer.parseInt(userInput[0]) - 1;
                final int col = Integer.parseInt(userInput[1]) - 1;
                if (!Utils.isValidCoordinates(row, col)) {
                    // coordinates out of range 1~3
                    System.out.println("Coordinates should be from 1 to 3!");
                    userAction();
                } else if (Utils.isOccupied(board, row, col)) {
                    // occupied cell selected
                    System.out.println("This cell is occupied! Choose another one!");
                    userAction();
                } else {
                    // fill the selected cell with mark
                    placeMark(row, col);
                    printBoard();
                }
            }
        }

        void placeMark(int row, int col) {
            if (x > o) {
                board[row * 3 + col] = 'O';
                o++;
            } else {
                board[row * 3 + col] = 'X';
                x++;
            }
        }

        void printResult() {
            if (isWin('X')) {
               System.out.println("X wins");
            } else if (isWin('O')) {
                System.out.println("O wins");
            } else if (isFull()) {
                System.out.println("Draw");
            } else {
                System.out.println("Game not finished");
            }
        }

        boolean isWin(char mark) {
            return board[0] == mark && board[1] == mark && board[2] == mark ||
                    board[3] == mark && board[4] == mark && board[5] == mark ||
                    board[6] == mark && board[7] == mark && board[8] == mark ||
                    board[0] == mark && board[3] == mark && board[6] == mark ||
                    board[1] == mark && board[4] == mark && board[7] == mark ||
                    board[2] == mark && board[5] == mark && board[8] == mark ||
                    board[0] == mark && board[4] == mark && board[8] == mark ||
                    board[2] == mark && board[4] == mark && board[6] == mark;
        }

        boolean isFull() {
            return x + o == 9;
        }
    }
  learner_created: true
- name: src/tictactoe/Board.java
  visible: true
  text: |-
    package tictactoe;

    class Board {
        char[] cells = new char[9];

        Board() {
            reset();
        }

        Board(char[] cells) {
            this.cells = cells.clone();
        }

        private void reset() {
            for (int i = 0; i < cells.length; i++) {
                cells[i] = '_';
            }
        }

        void printBoard() {
            System.out.println("---------");
            for (int i = 0; i < 3; i++) {
                System.out.print("| ");
                for (int j = 0; j < 3; j++) {
                    System.out.print(cells[i * 3 + j] + " ");
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }

        void printResult() {
            if (isWin('X')) {
                System.out.println("X wins");
            } else if (isWin('O')) {
                System.out.println("O wins");
            } else if (isFull()) {
                System.out.println("Draw");
            } else {
                System.out.println("Game not finished");
            }
        }

        void move(int row, int col) {
            char mark = isXTurn() ? 'X' : 'O';
            cells[row * 3 + col] = mark;
        }

        boolean isXTurn() {
            int count = 0;
            for (int i = 0; i < cells.length; i ++) {
                if (cells[i] != '_') count++;
            }
            return count % 2 == 0;
        }

        boolean isOccupied(int row, int col) {
            return cells[row * 3 + col] != '_';
        }

        int[] getEmptyCells() {
            int count = 0;
            for (int i = 0; i < cells.length; i++) {
                if (cells[i] == '_') count++;
            }
            int[] emptyCells = new int[count];
            count = 0;
            for (int i = 0; i < cells.length; i++) {
                if (cells[i] == '_') emptyCells[count++] = i;
            }
            return emptyCells;
        }

        boolean isOver() {
            return isWin('X') || isWin('O') || isFull();
        }

        boolean isWin(char mark) {
            return cells[0] == mark && cells[1] == mark && cells[2] == mark ||
                    cells[3] == mark && cells[4] == mark && cells[5] == mark ||
                    cells[6] == mark && cells[7] == mark && cells[8] == mark ||
                    cells[0] == mark && cells[3] == mark && cells[6] == mark ||
                    cells[1] == mark && cells[4] == mark && cells[7] == mark ||
                    cells[2] == mark && cells[5] == mark && cells[8] == mark ||
                    cells[0] == mark && cells[4] == mark && cells[8] == mark ||
                    cells[2] == mark && cells[4] == mark && cells[6] == mark;
        }

        boolean isFull() {
            for (int i = 0; i < cells.length; i++) {
                if (cells[i] == '_') return false;
            }
            return true;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7435#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 09 Jan 2022 12:25:36 UTC
record: 2
